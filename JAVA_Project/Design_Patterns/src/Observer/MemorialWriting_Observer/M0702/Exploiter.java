package Observer.MemorialWriting_Observer.M0702;

import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.CountDownLatch;

public class Exploiter implements MySubject {

    String name, content;
    ConcurrentHashMap<String, MyObserver> observers = new ConcurrentHashMap<>();
    MyObserver observer;

    Exploiter(String name) {
        this.name = name;
    }

    @Override
    public void registerObserver(MyObserver observer) {
        observers.put(observer.getName(), observer);
    }

    @Override
    public void removeObserver(MyObserver observer) {
        observers.remove(observer.getName());
    }

    @Override
    public void notifyObserver() {
        try {
            long begin = System.currentTimeMillis();
            CountDownLatch latch = new CountDownLatch(observers.size());
            for (MyObserver observer : observers.values()) {
                MessageSend message_send = new MessageSend(observer, latch, content);
                message_send.start();
            }
            latch.await();
            long end = System.currentTimeMillis();
            System.out.println(this.name + "消息发送完毕，耗时：" + (end - begin));
            System.out.println();
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
    }

    void postMessage(String content) {
        if (content != null && !content.trim().equals("")) {
            this.content = content;
            System.out.println(this.name + "发下消息啦，请看：" + this.content);
            this.notifyObserver();
        }
    }
}
