package Observer.MemorialWriting_Observer.M0905;

import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ConcurrentMap;
import java.util.concurrent.CountDownLatch;

public class Exploiter implements MySubject{

    private String name, content;
    private ConcurrentMap<String, MyObserver> observers = new ConcurrentHashMap<>();

    public Exploiter(String name) {
        this.name = name;
    }

    @Override
    public void registerObserver(MyObserver observer) {
        observers.put(observer.getName(), observer);
    }

    @Override
    public void removeObserver(MyObserver observer) {
        observers.remove(observer.getName());
    }

    @Override
    public void notifyObserver() {
        try {
            long beginTime = System.currentTimeMillis();
            CountDownLatch latch = new CountDownLatch(observers.size());
            for (MyObserver observer : observers.values()) {
                Messagesend messagesend = new Messagesend(observer, latch, this.content);
                messagesend.start();
            }
            latch.await();
            long endTime = System.currentTimeMillis();
            System.out.println(this.name + "已通知所有商户！耗时：" + (endTime - beginTime));
            System.out.println();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public void postMessage(String content) {
        if (content != null && !content.trim().equals("")) {
            this.content = content;
            System.out.println(this.name + "发送消息啦！消息为：" + this.content);
            this.notifyObserver();
            System.out.println();
        }
    }

}
