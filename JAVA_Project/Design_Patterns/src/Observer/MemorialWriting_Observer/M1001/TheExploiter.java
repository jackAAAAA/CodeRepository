package Observer.MemorialWriting_Observer.M1001;

import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.CountDownLatch;

public class TheExploiter implements MySubject {

    private String name, message;
    private ConcurrentHashMap<String, MyObserver> observers = new ConcurrentHashMap<>();
    private CountDownLatch latch;

    public TheExploiter(String name) {
        this.name = name;
    }

    @Override
    public void registerObserver(MyObserver observer) {
        observers.put(observer.getName(), observer);
    }

    @Override
    public void removeObserver(MyObserver observer) {
        observers.remove(observer);
    }

    @Override
    public void notifyObserver() {
        try {
            long begin = System.currentTimeMillis();
            latch = new CountDownLatch(observers.size());
            for (MyObserver observer :
                    observers.values()) {
                MessageSend messageSend = new MessageSend(observer, message, latch);
                messageSend.start();
            }
            latch.await();
            long end = System.currentTimeMillis();
            System.out.println(this.name + "已将消息发送完毕！" + "耗时：" + (end - begin));
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
    }

    public void postMessage(String message) {
        if (message != null && !message.trim().equals("")) {
            this.message = message;
            System.out.println(this.name + "发送消息为：" + message);
            notifyObserver();
            System.out.println();
        }
    }

}
